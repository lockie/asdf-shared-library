;;; -*- Mode: lisp -*-
;;;
;;; asdf-shared-library.lisp
;;;
;;; Copyright (C) 2016, Ralf Mattes <rm@mh.freiburg.de>
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

(in-package #:asdf-shared-library)

(defvar *compiler* "cc"
  "Default compiler to compile a shared library")

(defvar *cflags* "-fPIC -fSHARED"
  "Default cflags to compile sources to a shared library")

(defvar *pkg-config-binary* "pkg-config"
  "Binary for pkg-config")

(defun run-pkgconfig (package what)
;;  (declare (type what (member :cflags :libs)))
  (string-trim '(#\newline)
               (ecase what
                 (:cflags
                  (uiop:run-program (format nil "~A --cflags ~A" *pkg-config-binary* package)
                                    :output :string))
                 (:libs
                  (uiop:run-program (format nil "~A --libs ~A" *pkg-config-binary* package)
                                    :output :string)))))

(defun collect-pkg-config (packages what)
       (loop for package in packages
             collect (run-pkgconfig package what)))

(defclass shared-library (parent-component component)
  ((so-file-type :accessor so-file-type-of :initform
                 #+linux "so"
                 #+winows "dll"
                 #+darwin "dly")
   (soures       :initarg  :sources         :accessor sources-of  :initform ())
   (cflags       :initarg  :cflags          :accessor cflags-of   :initform ())
   (libs         :initarg  :libs            :accessor libs-of     :initform ())
   (packages     :initarg  :packages        :accessor packages-of :initform ())
   )
  (:documentation
   "This ASDF component represent a shared library that will be
    loaded when the containing ASDF system gets loaded."))

;;; FIXME: this is wrong, shared-library oesn't have a source file type
(defmethod source-file-type ((component shared-library) system)
  (declare (ignore system))
  nil)

(defmethod component-pathname ((component shared-library))
  (values))

;;(defmethod component-depends-on ())

;;; Returns a list of all files generated by applying the operation to
;;; the component
(defmethod output-files ((op compile-op) (component shared-library))
  (format *debug-io* "output-files ~a~%" (make-pathname :name (component-name component)
                                                        :type (so-file-type-of component)
                                                        :defaults (component-pathname (component-parent component))))
  (list (make-pathname :name (component-name component)
                       :type (so-file-type-of component)
                       :defaults (component-pathname (component-parent component)))))

(defmethod input-files ((op compile-op) (component shared-library))
  (format *debug-io* "Calling input-files ~A~&" (sources-of component))
  (break)
  (loop for child in (sources-of component)
        collect (component-pathname child)))

(defmethod input-files :around ((op compile-op) (component shared-library))
  (let  ((result (call-next-method)))
    (format *debug-io* "~%;;; Result is ~A" result)
    result))

(defmethod perform ((op compile-op) (component shared-library))
  (format *debug-io* "Compiling a shared library"))

(defmethod perform ((op load-op) (component shared-library))
  ;; FIXME: the real deal ...
  ;;  (cffi:load-foreign-library "")
  (format *debug-io* "Loading our shared library"))


;; Allow for naked :grovel-file and :wrapper-file in asdf definitions.
;;; Register our component classes with asdf so we can use "naked"
;;; :shared-library and : c-source components in system definitions
(setf (find-class 'asdf::shared-library) (find-class 'shared-library))
